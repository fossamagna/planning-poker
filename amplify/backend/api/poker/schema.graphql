type Card
  @model(subscriptions: { level: public })
  @aws_iam
  @aws_cognito_user_pools
  @auth(
    rules: [
      {
        allow: private
        provider: userPools
        operations: [read, create, delete, update]
      }
      { allow: public, provider: iam, operations: [read] }
    ]
  ) {
  id: ID!
  username: String!
  displayUserName: String!
  point: Int!
  roomId: String!
  ttl: AWSTimestamp!
}

type Room
  @model(subscriptions: { level: public })
  @aws_iam
  @aws_cognito_user_pools
  @auth(
    rules: [
      {
        allow: private
        provider: userPools
        operations: [read, create, delete, update]
      }
      { allow: public, provider: iam, operations: [read] }
    ]
  ) {
  id: ID!
  isOpened: Boolean!
  ttl: AWSTimestamp!
  participants: [Participant!]!
}

type Participant {
  username: String!
  displayUserName: String!
}

type Subscription {
  # Card
  onCreateCardByRoomId(roomId: String): Card
    @aws_subscribe(mutations: ["createCard"])
    @aws_iam
    @aws_cognito_user_pools
  onUpdateCardByRoomId(roomId: String): Card
    @aws_subscribe(mutations: ["updateCard"])
    @aws_iam
    @aws_cognito_user_pools
  onDeleteCardByRoomId(roomId: String): Card
    @aws_subscribe(mutations: ["deleteCard"])
    @aws_iam
    @aws_cognito_user_pools
  # Room
  onUpdateRoomById(id: ID!): Room
    @aws_subscribe(mutations: ["updateRoom"])
    @aws_iam
    @aws_cognito_user_pools
}
