type Card
  @model
  @auth(
    rules: [
      {
        allow: private
        provider: userPools
        operations: [read, create, delete, update]
      }
      { allow: public, provider: iam, operations: [read, create] }
    ]
  ) {
  id: ID!
  username: String!
  displayUserName: String!
  point: Int!
  roomId: String!
}

type Room
  @model
  @auth(
    rules: [
      {
        allow: private
        provider: userPools
        operations: [read, create, delete, update]
      }
      { allow: public, provider: iam, operations: [read, create] }
    ]
  ) {
  id: ID!
  isOpened: Boolean!
}

type Subscription {
  onCreateCardByRoomId(roomId: String): Card
    @aws_subscribe(mutations: ["createCard"])
  onUpdateCardByRoomId(roomId: String): Card
    @aws_subscribe(mutations: ["updateCard"])
  onDeleteCardByRoomId(roomId: String): Card
    @aws_subscribe(mutations: ["deleteCard"])
  onUpdateRoomById(id: ID!): Room @aws_subscribe(mutations: ["updateRoom"])
}
